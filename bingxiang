#!/bin/bash

# --------------------------------------------------------------------------- #
#                       SHELL OPTIONS
# --------------------------------------------------------------------------- #

set -u
set -o pipefail

# --------------------------------------------------------------------------- #
#                       VARIABLE DEFINITIONS
# --------------------------------------------------------------------------- #

PATH=/usr/bin:/bin

readonly _action="${1:-x}"
readonly _infile="${2:-x}"
readonly _ext='bbxxa'
readonly _cipher='aes-256-cbc'
readonly _digest='sha512'
readonly _iterations=5000000

# --------------------------------------------------------------------------- #
#                       FUNCTIONS
# --------------------------------------------------------------------------- #

errout() {
        local _msg="${0##*/} error: ${1}"
        printf '%s\n' "${_msg}"
        exit 1
}

print_usage_and_exit() {
        printf '%s\n' "Usage: ${0##*/} lock|unlock input-file"
        exit 1
}

audit_cliargs() {
        if [ "${_action:-x}" == 'lock' ] ; then
                :
        elif [ "${_action:-x}" == 'unlock' ] ; then
                :
        else
                print_usage_and_exit
        fi

        if [ "${_infile:-x}" == 'x' ] ; then
                print_usage_and_exit
        fi

        if [ ! -f "${_infile}" ] ; then
                errout "${_infile} not found"
        fi
}

encrypt_file() {
        local _outfile="${_infile##*/}.${_ext}"

        if [ -e "${_outfile}" ] ; then
                errout "${_outfile} already exists"
        fi

        openssl enc                                                     \
        -"${_cipher}"                                                   \
        -md "${_digest}"                                                \
        -iter ${_iterations}                                            \
        -pbkdf2                                                         \
        -salt                                                           \
        -in "${_infile}"                                                \
        -out "${_outfile}"                                              \
        -e -a

        if [ ${?} -ne 0 ] ; then
                errout 'openssl enc reported a problem'
        fi

        printf '%s\n' "Encrypted output file is ${_outfile}"
}

decrypt_file() {
	# Remove the extension and put outfile in cwd
        local _outfile="${_infile%.${_ext}}"
	_outfile="${_outfile##*/}"

        if grep -Evq "\.${_ext}" <<<"${_infile}" ; then
                errout "I only decrypt .${_ext} files"
        fi

        if [ -f "${_outfile}" ] ; then
                errout "${_outfile} already exists"
        fi

        openssl enc                                                     \
        -"${_cipher}"                                                   \
        -md "${_digest}"                                                \
        -iter ${_iterations}                                            \
        -pbkdf2                                                         \
        -in "${_infile}"                                                \
        -out "${_outfile}"                                              \
        -d -a

        if [ ${?} -ne 0 ] ; then
                errout 'openssl enc reported a problem'
        fi

        printf '%s\n' "Decrypted output file is ${_outfile}"
}


# -------------------------------------------------------------------- #
#                       MAIN LOGIC
# -------------------------------------------------------------------- #

audit_cliargs

case "${_action}" in
        'lock')         encrypt_file
                        ;;
        'unlock')       decrypt_file
                        ;;
        *)              print_usage_and_exit
                        ;;
esac

exit 0
